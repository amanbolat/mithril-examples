import markup from '../../util/markup.js';

export default markup(
	'In mithril you can set class names in two primary ways.',
	'One is in the selector:',
	'`m(\'h1.foo.bar\')`.',
	'The other is in the attributes of the vnode:',
	'`m(\'h1\', { className: \'foo bar\' })`.',
	'Knowing when to use each style may not be immediately obvious.',
	'In general, a good approach is to put class names that will not change',
	'into the selector, and to put dynamic class names in the attributes.',
	'Following this convention makes it so that mithril does not have to re-parse',
	'the selector, and typically makes view code more readable by allowing',
	'selectors to always be simple strings.',
	'\n',
	'When there are many dynamic classes in use, a common technique among',
	'mithril users is to use an array that contains each part of the class name',
	'and join it into a single class name string.',
	'\n',
	'One other thing to note is that because mithril hyperscript supports',
	'css-like selectors while JSX does not, the distinction between dynamic',
	'and static class names is of less concern to JSX users.',
	'However, JSX users can still use joined arrays for class names.',
	'A good example of this is the',
	'[lichess mobile app](https://github.com/veloce/lichobile/blob/f7936674bce5f0ca779df7e35720e056d334df1e/src/js/ui/clock/clockView.tsx#L23-L49).',
	'\n',
	'This example uses a factory to instantiate a new model for each',
	'instance of the `ClassNamesComponent`. This is optional, but makes',
	'it possible to have multiple simultaneous instances of the component',
	'render without having them interfere with one another.'
);